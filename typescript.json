{
    /*
    	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
    	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    	// same ids are connected.
    	// Example:
    	"Print to console": {
    		"prefix": "log",
    		"body": [
    			"console.log('$1');",
    			"$2"
    		],
    		"description": "Log output to console"
    	}
    */
    "Print to console": {
        "prefix": "ll",
        "body": [
            "console.log($1);"
        ],
        "description": "Log output to console"
    },
    "it": {
        "prefix": "itt",
        "body": [
            "it('$1', () => {",
            "\texpect(true).toBe(true);",
            "});"
        ],
        "description": "Log output to console"
    },
    "map": {
        "prefix": "mm",
        "body": [
            ".map(",
            "\tresponse => {",
            "\t\t${1:console.log(response);}",
            "\t});"
        ],
        "description": "map"
    },
    "subscribe": {
        "prefix": "ss",
        "body": [
            ".subscribe(",
            "\tresponse => {",
            "\t\t${1:console.log(response);}",
            "\t});"
        ],
        "description": "subscribe"
    },
    "observer": {
        "prefix": "ooo",
        "body": [
            "return new Observable(",
            "\tobserver => {",
            "\t\t$1",
            "\t});"
        ],
        "description": "observer"
    },
    "observer next": {
        "prefix": "onn",
        "body": [
            "observer.next($1);",
            "observer.complete();"
        ],
        "description": "observer next"
    },
    "observer error": {
        "prefix": "oee",
        "body": [
            "observer.error(${1:error});",
            "observer.complete();"
        ],
        "description": "observer next"
    }
}